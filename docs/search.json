[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Lehigh Valley Air Quality",
    "section": "",
    "text": "PM2.5 describes fine inhalable particles, with diameters that are generally 2.5 micrometers and smaller. Particles of this size can have both health and environmental effects. The following project focuses on PM2.5 data collected throughout the Lehigh Valley.\nTwo sources of PM2.5 data throughout the Lehigh Valley:\n\nData collected by the Pennsylvania Department of Environmental Protection at their Freemansburg monitoring site. Data can be accessed here.\nData collected by a series of PurpleAir sensors located throughout the Lehigh Valley. Data can be accessed here."
  },
  {
    "objectID": "calibration.html",
    "href": "calibration.html",
    "title": "Calibration",
    "section": "",
    "text": "Data import:\n\n\n\nCode\n# Packages ----------------------------------------------------------------\n\n# Install and load required packages\npacman::p_load(tidyverse, lubridate, patchwork, weathermetrics)\n\n# Data --------------------------------------------------------------------\n\n# EPA reference station\n# Build query string for EPA AirNow API\n# Note this requires an account and an API key for access\n\nreadRenviron('.Renviron')\nairnow.api  <- Sys.getenv('airnow')\n\nquery <- {\n  base.url <- 'https://www.airnowapi.org/aq/data/?'\n  date.url <- 'startDate=2022-01-01T05&endDate=2024-01-01T05&'\n  bbox.url <- 'parameters=PM25&BBOX=-75.410830,40.603913,-75.289980,40.699767&'\n  data.url <- 'dataType=B&format=text/csv&verbose=1&monitorType=0&includerawconcentrations=1&'\n  api.key  <- paste0('API_KEY=', airnow.api)\n  query <- paste0(base.url,date.url,bbox.url,data.url,api.key)\n}\n\n# Read in EPA data from API query\nquery  <- read_csv(query, col_names=FALSE)\ndf.dep <- query %>%\n  select(X3,X7) %>%\n  rename(datetime=1,\n         pm25=2) %>%\n  mutate(datetime=datetime-hours(5),\n         sensor_index='Freemansburg DEP') %>%\n  mutate(pm25=case_when(\n    pm25 < 0 ~ NA_real_,\n    TRUE ~ pm25\n  ))\n\n# PurpleAir data\n# Data are exported from SQL database hosted on gisweb server\ndf.pa <- read_csv('data/fb_sensor_export.csv') %>%\n  arrange(sensor_index, time_stamp) %>%\n  # Convert timestamp to datetime\n  mutate(datetime=as_datetime(time_stamp, tz='EST5EDT')) %>%\n  # Remove minutes from time\n  mutate(datetime=as.POSIXct(paste(datetime), format=\"%Y-%m-%d %H\")) %>%\n  # Group by sensor and datetime and calculate hourly averages\n  group_by(sensor_index,datetime) %>%\n  summarize(pm25=round(mean(pm2_5, na.rm=TRUE),1),\n            rh=round(mean(humidity, na.rm=TRUE),1),\n            t=round(mean(temperature, na.rm=TRUE),1)) %>%\n  ungroup() %>%\n  mutate(sensor_index=case_when(\n    sensor_index == 108584 ~ 'Freemansburg PA1',\n    sensor_index == 108706 ~ 'Freemansburg PA2',\n    TRUE ~ 'Freemansburg PA3'\n  )) %>%\n  relocate(sensor_index, .after='pm25')\n\n# Convert from long to wide format\ndf.pa.wide <- df.pa |> \n  pivot_wider(values_from=c(pm25,rh,t), names_from=sensor_index) |> \n  rename(PA1_pm=2,PA2_pm=3,PA3_pm=4,PA1_rh=5,PA2_rh=6,PA3_rh=7,PA1_t=8,PA2_t=9,PA3_t=10) |> \n  # Calculate dew point from humidity and temperature\n  mutate(\n    PA1_dp=humidity.to.dewpoint(PA1_rh, PA1_t, temperature.metric = \"fahrenheit\"),\n    PA2_dp=humidity.to.dewpoint(PA2_rh, PA2_t, temperature.metric = \"fahrenheit\"),\n    PA3_dp=humidity.to.dewpoint(PA3_rh, PA3_t, temperature.metric = \"fahrenheit\")\n  )\n\n# Join PurpleAir data with DEP reference data by datetime\ndf.pm25 <- df.pa.wide |> \n  left_join(df.dep,by='datetime') |> \n  select(-sensor_index)\n\nstr(df.pm25)\n\n\n\n\ntibble [2,802 Ã— 15] (S3: tbl_df/tbl/data.frame)\n $ datetime: POSIXct[1:2802], format: \"2022-09-26 14:00:00\" \"2022-09-26 15:00:00\" ...\n $ PA1_pm  : num [1:2802] 4.8 4.3 4.7 5.1 5.1 4.2 4.2 5.3 4.6 5 ...\n $ PA2_pm  : num [1:2802] 4.8 4.2 4.6 5.2 5.2 4.3 4.3 5.2 4.4 4.8 ...\n $ PA3_pm  : num [1:2802] 5.3 4.6 5.1 5.4 5.4 4.7 4.6 6.2 4.5 4.7 ...\n $ PA1_rh  : num [1:2802] 56.6 48.6 45.2 42.3 41.5 40.7 39 39.2 39.1 41.4 ...\n $ PA2_rh  : num [1:2802] 57.4 48.7 44.9 42 41.1 40.3 38.5 38.7 38.4 41.4 ...\n $ PA3_rh  : num [1:2802] 52 43.9 40.4 37.9 37 36.3 34.8 35 34.4 37.6 ...\n $ PA1_t   : num [1:2802] 69.7 72.3 73.3 74 74 73.8 74 73.7 71 68.6 ...\n $ PA2_t   : num [1:2802] 69.4 72 73.3 73.8 73.7 73.5 73.6 73.3 71 68.2 ...\n $ PA3_t   : num [1:2802] 70.7 73.6 74.7 75.2 75.1 74.9 75.2 74.3 72 69.4 ...\n $ PA1_dp  : num [1:2802] 53.5 51.8 50.7 49.6 49.1 ...\n $ PA2_dp  : num [1:2802] 53.6 51.6 50.5 49.2 48.5 ...\n $ PA3_dp  : num [1:2802] 52.1 50.2 49 47.7 47 ...\n $ pm25    : num [1:2802] 5.2 5.9 10.1 5.6 5.9 5.1 5.9 6.3 7.5 8.1 ...\n $ PA1_pmc : num [1:2802] 6.48 7.45 8.24 8.97 9.11 ...\n\n\n\n\nCalibration:\n\n\n\nCode\n# Regression model for PM2.5 greater than 20\npa1.mod1 <- lm(pm25 ~ PA1_pm + PA1_t + PA1_rh + PA1_dp,\n               data = df.pm25[df.pm25$PA1_pm>20,])\nsummary(pa1.mod1)\n\n# Regression model for PM2.5 less than or equal to 20\npa1.mod2 <- lm(pm25 ~ PA1_pm + PA1_t + PA1_rh + PA1_dp,\n               data = df.pm25[df.pm25$PA1_pm<=20,])\nsummary(pa1.mod2)\n\n# Set regression coefficients \n{\n  b0 <- pa1.mod1$coefficients[[1]]\n  b1 <- pa1.mod1$coefficients[[2]] \n  b2 <- pa1.mod1$coefficients[[3]] \n  b3 <- pa1.mod1$coefficients[[4]]\n  b4 <- pa1.mod1$coefficients[[5]]\n  \n  y0 <- pa1.mod2$coefficients[[1]]\n  y1 <- pa1.mod2$coefficients[[2]] \n  y2 <- pa1.mod2$coefficients[[3]] \n  y3 <- pa1.mod2$coefficients[[4]]\n  y4 <- pa1.mod2$coefficients[[5]]\n}\n\n# Calculate corrected pm2.5 values\ndf.pm25 <- df.pm25 |> \n  mutate(\n    PA1_pmc=case_when(\n      PA1_pm > 20 ~ b0 + (b1*PA1_pm) + (b2*PA1_t) + (b3*PA1_rh) + (b4*PA1_dp),\n      TRUE ~ y0 + (y1*PA1_pm) + (y2*PA1_t) + (y3*PA1_rh) + (y4*PA1_dp)\n    )\n  )\n\n\n\n\nRegression plots:\n\n\n\nCode\n# Set theme for plots\ntheme <- theme(panel.background=element_rect(fill=NA),\n               panel.border=element_rect(fill=NA,size=0),\n               panel.grid.major=element_line(size=0),\n               panel.grid.minor=element_line(size=0),\n               plot.title=element_blank(),\n               axis.text.y=element_text(family=\"Times\",size=7,colour=\"black\"),\n               axis.text.x=element_text(family=\"Times\",size=7,colour=\"black\"),\n               axis.title=element_text(family=\"Times\",size=8,colour=\"black\"),\n               axis.ticks=element_line(size=0.25,colour=\"black\",linetype=1),\n               axis.line=element_line(size=0.25,colour=\"black\",linetype=1),\n               legend.justification=\"top\",\n               legend.background=element_blank(),\n               legend.position='right',\n               legend.direction='vertical',\n               legend.key=element_blank(),\n               legend.title=element_text(family=\"Times\",size=7,colour=\"black\"),\n               legend.text=element_text(family=\"Times\",size=7,colour=\"black\"))\n\n# Plot 1 - regression observed data\np1 <- df.pm25 |> \n  ggplot(aes(pm25,PA1_pm,color=PA1_rh)) + \n  geom_point(show.legend = FALSE) +\n  geom_abline(slope=1, linetype = \"dashed\", color=\"Red\") +\n  scale_color_viridis_b(name='Relative\\nhumidity') +\n  labs(x=expression(paste(\"DEP PM\"[\"2.5\"],\n                          \" (\",mu, \"g\", \"/\", m^3,\")\", sep=\"\")),\n       y=expression(paste(\"PM\"[\"2.5\"],\n                          \" [as-reported] (\", mu, \"g\", \"/\", m^3,\")\", sep=\"\"))) +\n  theme\n\n# Plot 2 - regression corrected data\np2 <- df.pm25 |> \n  ggplot(aes(pm25,PA1_pmc,color=PA1_rh)) + \n  geom_point() +\n  geom_abline(slope=1, linetype = \"dashed\", color=\"Red\") +\n  scale_color_viridis_b(name='Relative\\nhumidity') +\n  labs(x=expression(paste(\"DEP PM\"[\"2.5\"],\n                          \" (\",mu, \"g\", \"/\", m^3,\")\", sep=\"\")),\n       y=expression(paste(\"PM\"[\"2.5\"],\n                          \" [corrected] (\", mu, \"g\", \"/\", m^3,\")\", sep=\"\"))) +\n  theme\n\n# Patchwork plots together\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\nModel fit:\n\n\n\nCode\n# Subset PA1 sensor at Freemansburg site\ndf.glm <- df.pm25 |> \n  dplyr::select(PA1_pm, PA1_t, PA1_rh, PA1_dp, pm25)\n\n# Convert tibble to data frame \ndf.glm <- as.data.frame(df.glm)\n\n# Set model definition\nglm.mdef <-\n  new(\"ModelSetDefinition\",\n      response = \"pm25\",\n      model.type = \"lm\",\n      model.family = \"gaussian\",\n      base.model = c(\"\"),\n      variables = c(\"PA1_pm\",\n                    \"PA1_t\",\n                    \"PA1_rh\",\n                    \"PA1_dp\"),\n      sq.terms = c(\"\"),\n      interaction.vars = c(\"\"),\n      remove.interactions = c(\"\"),\n      required.together = list(),\n      never.together = list(),\n      random = c(\"\"),\n      max.terms.in.formula = 4,\n      max.interaction.size = 0,\n      max.num.interactions = 0)\n\n# Create model set\nglm.mods <- createModelSet(glm.mdef)\n\n# Run model set with repeat burrows\nglm.mods <- runModelSet(glm.mods, model.data=df.glm)\n\n# Model fit summary\nglm.mods.summ <- summary(glm.mods)\nglm.mods.summ <- glm.mods.summ |> \n  mutate(across(where(is.numeric), ~round(.x,3)))\n\n# Variable importance summary\nglm.mods.varimp <- estimateVariableImportance(glm.mods)\nglm.mods.varimp <- glm.mods.varimp |> \n  mutate(across(where(is.numeric), ~round(.x,3)))\n\nglm.mods.summ[,c(2,4,6:7)]\n\n\n\n\n                              model.name k     aicc delta.aicc\n3           pm25~PA1_pm + PA1_t + PA1_rh 5 16134.04      0.000\n5          pm25~PA1_pm + PA1_rh + PA1_dp 5 16135.03      0.988\n7  pm25~PA1_pm + PA1_t + PA1_rh + PA1_dp 6 16135.91      1.873\n4           pm25~PA1_pm + PA1_t + PA1_dp 5 16146.35     12.313\n13                  pm25~PA1_pm + PA1_rh 4 16198.97     64.934\n14                  pm25~PA1_pm + PA1_dp 4 16728.02    593.979\n12                   pm25~PA1_pm + PA1_t 4 16735.22    601.182\n1                            pm25~PA1_pm 3 16762.87    628.826\n2                   pm25~PA1_rh + PA1_dp 4 18931.77   2797.735\n6           pm25~PA1_t + PA1_rh + PA1_dp 5 18921.33   2787.291\n8                                 pm25~1 2 18947.96   2813.917\n9                             pm25~PA1_t 3 18936.26   2802.218\n10                           pm25~PA1_rh 3 18945.55   2811.509\n11                           pm25~PA1_dp 3 18929.81   2795.771\n15                   pm25~PA1_t + PA1_rh 4 18934.10   2800.065\n16                   pm25~PA1_t + PA1_dp 4 18931.67   2797.629"
  },
  {
    "objectID": "purpleairapi.html",
    "href": "purpleairapi.html",
    "title": "API data access",
    "section": "",
    "text": "PurpleAir API:\n\n\n\nCode\n# Install and load required packages --------------------------------------\npacman::p_load(jsonlite,tidyverse,lubridate)\n\n# AQI function ------------------------------------------------------------\n# Function to convert pm2.5 to AQI\naqi <- function(conc){\n  concL <- case_when(\n    between(conc,0,12) ~ 0,\n    between(conc,12.1,35.4) ~ 12.1,\n    between(conc,35.5,55.4) ~ 35.5,\n    between(conc,55.5,150.4) ~ 55.5,\n    between(conc,150.5,250.4) ~ 150.5,\n    TRUE ~ 250.5)\n  \n  concH <- case_when(\n    between(conc,0,12) ~ 12,\n    between(conc,12.1,35.4) ~ 35.4,\n    between(conc,35.5,55.4) ~ 55.4,\n    between(conc,55.5,150.4) ~ 150.4,\n    between(conc,150.5,250.4) ~ 250.4,\n    TRUE ~ 500.4)\n  \n  aqiL <- case_when(\n    between(conc,0,12) ~ 0,\n    between(conc,12.1,35.4) ~ 51,\n    between(conc,35.5,55.4) ~ 101,\n    between(conc,55.5,150.4) ~ 151,\n    between(conc,150.5,250.4) ~ 201,\n    TRUE ~ 301)\n  \n  aqiH <- case_when(\n    between(conc,0,12) ~ 50,\n    between(conc,12.1,35.4) ~ 100,\n    between(conc,35.5,55.4) ~ 150,\n    between(conc,55.5,150.4) ~ 200,\n    between(conc,150.5,250.4) ~ 300,\n    TRUE ~ 500)\n  \n  aqi <- (((aqiH-aqiL)/(concH-concL)) * (conc-concL)) + aqiL\n  \n  return(aqi)\n}\n\n# PurpleAir data API call -------------------------------------------------\n# Set base url for PurpleAir API\n# Currently using the group option to download data for all sensors in the\n# Lehigh Valley area. Another option is to search geographically.\n# Set bounding box to search for sensors around Bethlehem\n#location <- '&nwlng=-75.500&nwlat=40.688&selng=-75.280&selat=40.531&location_type=0'\nbase.url <- 'https://api.purpleair.com/v1/groups/1294/members?api_key='\n\n# Grab API key from R environment file\nreadRenviron('C:/R/projects/purpleair/.Renviron')\napi.key  <- Sys.getenv('purpleair_token')\n\n# Set variables to query\n# Full list of variables found here: https://api.purpleair.com/#api-sensors-get-sensors-data\nfields   <- c('name',\n              'latitude',\n              'longitude',\n              'date_created',\n              'last_seen',\n              'humidity',\n              'temperature',\n              'pressure',\n              'pm2.5',\n              'pm2.5_10minute',\n              'pm2.5_60minute',\n              'pm2.5_1week')\n\n# Create url query string for API call\nurl <- paste0(\n  base.url, api.key, '&', 'fields=', paste(fields, collapse = '%2C'), '&location_type=0')\n\n# Read .json file returned by API call\npa.json <- fromJSON(url)\n\npa.df <- data.frame(pa.json$data)\nnames <- tibble(label=pa.json$fields)\n\npa.df <- pa.df |> \n  rename_all(~names |> pull(label)) |>\n  mutate_at(c(1:3,5:13), as.numeric) |>\n  mutate(aqi=round(aqi(pm2.5),0),\n         aqi_10=round(aqi(pm2.5_10minute),0),\n         aqi_60=round(aqi(pm2.5_60minute),0),\n         aqi_1wk=round(aqi(pm2.5_1week),0)) |>\n  rename(snsr_nd=1,\n         dt_crtd=2,\n         last_sn=3,\n         name=4,\n         pm25=10,\n         pm25_10=11,\n         pm25_60=12,\n         pm25_1wk=13)\n\n\n\n\nNOAA API:\n\n\n\nCode\n# Install and load required packages --------------------------------------\npacman::p_load(rnoaa)\n\n# Download daily NOAA data for Lehigh Valley airport\nnoaa <- meteo_tidy_ghcnd(\n    stationid='USW00014737',\n    var=c('prcp','tavg','tmax','tmin','snow','snwd')\n)\n\nnoaa <- noaa |>  drop_na(tmax)"
  }
]